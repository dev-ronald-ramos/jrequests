const XConsulta = (options) => {
  const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
        if (options.dataType === 'json') {
          try { const jsonResponse = JSON.parse(xhr.responseText); options.respuesta(jsonResponse); } catch (error) { options.error(xhr, 'Error en el análisis JSON'); }
        }else { options.respuesta(xhr.responseText); }
      }else { options.error(xhr, `Error en la solicitud: ${xhr.status}`);  }
      options.completado(xhr, xhr.status);
    }
  };
  xhr.open(options.type || 'GET', options.url, true);
  // Configura cabeceras personalizadas si es necesario
  if (options.headers) {
    for (const headerName in options.headers) {
      xhr.setRequestHeader(headerName, options.headers[headerName]);
    }
  }
  // Envía datos en caso de una solicitud POST o PUT
  if (options.type && (options.type === 'POST' || options.type === 'PUT')) {
    xhr.setRequestHeader('Content-Type', 'application/json'); // Configura el tipo de contenido si es necesario
    xhr.send(JSON.stringify(options.datos));
  } else { xhr.send();  }
};

const r = {
  consulta: (options) => {
    if (!options || !options.url) {  console.error('Se requiere una URL para la solicitud AJAX.'); return; }
    XConsulta({
      url: options.url,
      datos: options.datos || {},
      type: options.type || 'GET',
      dataType: options.dataType || 'json',
      respuesta: options.respuesta || function() {},
      error: options.error || function() {},
      completado: options.completado || function() {},
      headers: options.headers || {}
    });
  },
  // Otras funciones...
};


const R = (arg) => {  
    
    //DOMContentLoaded
    if(typeof arg == 'function'){ document.addEventListener('DOMContentLoaded',arg); return }  
    
    //Css
    let elements 
    if(typeof arg == 'string'){ elements = document.querySelectorAll(arg); }  
    
    //Selector Css
    if( arg instanceof HTMLElement){ elements = [arg] }  
    
    elements.css = (... args) => {
        const [property, value] = args
        const isString =  typeof property == 'string'
            
        elements.forEach(el => {
            if(isString) el.style[property] = value 
            else{
                const entriesCSS = Object.entries(property)
                entriesCSS.forEach(([property, value]) => { el.style[property] = value; })
            }
        })
        return elements
    }
    
    //Eventos    
    elements.un = (event, callback) => {
        elements.forEach(el => { el.addEventListener(event, callback); })
        return elements
    }
    
    
    //Each 
    elements.each = (fn) => {
        elements.forEach( (el, index) => fn(index, el) )
        return elements
    }
    
    //fadeIn 
    elements.fadeIn = (duration = 1000) => {
        elements.forEach( (el, index) =>{
            const animation =  el.animate([
                {opacity: 0}, {opacity: 1}
            ], {duration} )
            animation.onfinish = () => el.style.opacity = 1;
        } )
        return elements
    }

/*Value*/

    // Método val para obtener el valor de un elemento
    elements.valor = () => {
        if (elements.length > 0) { return elements[0].value; }
        return null;
    }
    // Método val para obtener el valor de un atributo de un elemento
    elements.atributo = (attributeName) => {
        if (elements.length > 0) {
            const element = elements[0];
            if (element.hasAttribute(attributeName)) {  return element.getAttribute(attributeName); }
        }
        return null;
    }
    //cambiar el valor del atributo
    elements.cambiarAtributo = (attributeName, newValue) => {
        elements.forEach(el => {
            if (el.hasAttribute(attributeName)) {
                el.setAttribute(attributeName, newValue);
            }
        });
        return elements;
    }
    /*append 
    elements.appendAtributo = (attributeName, valueToAppend) => {
        elements.forEach(el => {
            if (el.hasAttribute(attributeName)) {
                const currentValue = el.getAttribute(attributeName);
                el.setAttribute(attributeName, currentValue + valueToAppend);
            }
        });
        return elements;
    } */

    
/* insert content */

    // Método para insertar texto en elementos seleccionados
    elements.texto = (text) => {
        elements.forEach(el => { el.textContent = text; });
        return elements;
    }

    // Método para insertar HTML en elementos seleccionados
    elements.html = (html) => {
        elements.forEach(el => { el.innerHTML = html; });
        return elements;
    }
    
    
/*Appens*/
    elements.adjuntar = (...elementsToAppend) => {
        elements.forEach(parentElement => {
            elementsToAppend.forEach(childElement => {
                parentElement.appendChild(childElement);
            });
        });
        return elements;
    };





    return elements 
}